{"/home/travis/build/npmtest/node-npmtest-hapi-auth-jwt2/test.js":"/* istanbul instrument in package npmtest_hapi_auth_jwt2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hapi-auth-jwt2/lib.npmtest_hapi_auth_jwt2.js":"/* istanbul instrument in package npmtest_hapi_auth_jwt2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hapi_auth_jwt2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hapi_auth_jwt2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hapi-auth-jwt2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hapi-auth-jwt2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hapi_auth_jwt2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hapi_auth_jwt2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hapi_auth_jwt2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hapi_auth_jwt2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hapi_auth_jwt2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hapi_auth_jwt2.__dirname + '/lib.npmtest_hapi_auth_jwt2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hapi-auth-jwt2/node_modules/hapi-auth-jwt2/lib/index.js":"'use strict';\n\nvar Boom = require('boom');           // error handling https://github.com/hapijs/boom\nvar assert = require('assert');       // use assert to check if options are set\nvar JWT = require('jsonwebtoken');    // https://github.com/docdis/learn-json-web-tokens\nvar extract = require('./extract');   // extract token from Auth Header, URL or Coookie\nvar pkg = require('../package.json'); // use package name and version rom package.json\nvar internals = {};                   // see: http://hapijs.com/styleguide#module-globals\n\n/**\n * register registers the name and exposes the implementation of the plugin\n * see: http://hapijs.com/api#serverplugins for plugin format\n * @param {Object} server - the hapi server to which we are attaching the plugin\n * @param {Object} options - any options set during plugin registration\n * in this case we are not using the options during register but we do later.\n * @param {Function} next - the callback called once registration succeeds\n * @returns {Function} next - returns (calls) the callback when complete.\n */\nexports.register = function (server, options, next) {\n  server.auth.scheme('jwt', internals.implementation); // hapijs.com/api#serverauthapi\n\n  return next();\n};\n\n/**\n * attributes merely aliases the package.json (re-uses package name & version)\n * simple example: github.com/hapijs/hapi/blob/master/API.md#serverplugins\n */\nexports.register.attributes = { // hapi requires attributes for a plugin.\n  pkg: pkg                      // also see: http://hapijs.com/tutorials/plugins\n};\n\n/**\n * isFunction checks if a given value is a function.\n * @param {Object} functionToCheck - the object we want to confirm is a function\n * @returns {Boolean} - true if the functionToCheck is a function. :-)\n */\ninternals.isFunction = function (functionToCheck) {\n  var getType = {};\n\n  return functionToCheck\n    && getType.toString.call(functionToCheck) === '[object Function]';\n};\n\n/**\n * isArray checks if a given variable is an Array.\n * @param {Object} variable - the value we want to confirm is an Array\n * @returns {Boolean} - true if the variable is an Array.\n */\ninternals.isArray = function (variable) {\n  var getType = {};\n\n  return variable\n    && getType.toString.call(variable) === '[object Array]';\n};\n\n/**\n * implementation is the \"main\" interface to the plugin and contains all the\n * \"implementation details\" (methods) such as authenicate, response & raiseError\n * @param {Object} server - the Hapi.js server object we are attaching the\n * the hapi-auth-jwt2 plugin to.\n * @param {Object} options - any configuration options passed in.\n * @returns {Function} authenicate - we return the authenticate method after\n * registering the plugin as that's the method that gets called for each route.\n */\ninternals.implementation = function (server, options) {\n  assert(options, 'options are required for jwt auth scheme'); // pre-auth checks\n  assert(options.validateFunc\n    || options.verifyFunc, 'validateFunc OR verifyFunc function is required!');\n\n  // allow custom error raising or default to Boom if no errorFunc is defined\n  function raiseError (errorType, message, scheme, attributes) {\n    var errorContext = {\n      errorType: errorType,\n      message: message,\n      scheme: scheme,\n      attributes: attributes\n    };\n    var _errorType = errorType;   // copies of params\n    var _message = message;       // so we can over-write them below\n    var _scheme = scheme;         // without a linter warning\n    var _attributes = attributes; // if you know a better way please PR!\n\n    if (options.errorFunc && internals.isFunction(options.errorFunc)) {\n      errorContext = options.errorFunc(errorContext);\n\n      if (errorContext) {\n        _errorType = errorContext.errorType;\n        _message = errorContext.message;\n        _scheme = errorContext.scheme;\n        _attributes = errorContext.attributes;\n      }\n    }\n\n    return Boom[_errorType](_message, _scheme, _attributes);\n  }\n\n  return {\n    /**\n     * authenticate is the \"work horse\" of the plugin. it's the method that gets\n     * called every time a route is requested and needs to validate/verify a JWT\n     * @param {Object} request - the standard route handler request object\n     * @param {Object} reply - the standard hapi reply interface\n     * @returns {Boolean} if the JWT is valid we return a credentials object\n     * otherwise throw an error to inform the app & client of unauthorized req.\n     */\n    authenticate: function (request, reply) {\n      var token = extract(request, options); // extract token Header/Cookie/Query\n      var tokenType = options.tokenType || 'Token'; // see: https://git.io/vXje9\n      var decoded, keyFunc;\n\n      if (!token) {\n        return reply(raiseError('unauthorized', null, tokenType));\n      }\n\n      if (!extract.isValid(token)) { // quick check for validity of token format\n        return reply(raiseError('unauthorized',\n          'Invalid token format', tokenType));\n      } // verification is done later, but we want to avoid decoding if malformed\n      request.auth.token = token; // keep encoded JWT available in the request\n      // otherwise use the same key (String) to validate all JWTs\n\n      try {\n        decoded = JWT.decode(token, { complete: options.complete || false });\n      } catch (e) { // request should still FAIL if the token does not decode.\n        return reply(raiseError('unauthorized',\n          'Invalid token format', tokenType));\n      }\n\n      if (options.key && typeof options.validateFunc === 'function') {\n        // if keyFunc is function allow dynamic key lookup: https://git.io/vXjvY\n        keyFunc = (internals.isFunction(options.key))\n        ? options.key : function (decoded_token, callback) {\n          return callback(null, options.key);\n        };\n\n        keyFunc(decoded, function (err, key, extraInfo) {\n          var verifyOptions = options.verifyOptions || {};\n          var keys = (internals.isArray(key)) ? key : [key];\n          var keysTried = 0;\n\n          if (err) {\n            return reply(raiseError('wrap', err));\n          }\n          if (extraInfo) {\n            request.plugins[pkg.name] = { extraInfo: extraInfo };\n          }\n\n          keys.some(function (k) { // itterate through one or more JWT keys\n            JWT.verify(token, k, verifyOptions,\n              function (verify_err, verify_decoded) {\n                if (verify_err) {\n                  keysTried++;\n                  if (keysTried >= keys.length) {\n                    return reply(raiseError('unauthorized',\n                      'Invalid token', tokenType), null, { credentials: null });\n                  }\n                  // There are still other keys that might work\n\n                  // return false;\n                } else { // see: http://hapijs.com/tutorials/auth for validateFunc signature\n                  return options.validateFunc(verify_decoded, request,\n                    function (validate_err, valid, credentials) { // bring your own checks\n                      if (validate_err) {\n                        return reply(raiseError('wrap', validate_err));\n                      }\n                      if (!valid) {\n                        reply(raiseError('unauthorized',\n                          'Invalid credentials', tokenType), null,\n                          { credentials: credentials || verify_decoded });\n                      } else {\n                        reply.continue({\n                          credentials: credentials || verify_decoded,\n                          artifacts: token\n                        });\n                      }\n\n                      return false;\n                    });\n                }\n\n                return false;\n              });\n\n            return false;\n          });\n\n          return true;\n        }); // END keyFunc\n      } else { // see: https://github.com/dwyl/hapi-auth-jwt2/issues/130\n        return options.verifyFunc(decoded, request,\n          function (verify_error, valid, credentials) {\n            if (verify_error) {\n              return reply(raiseError('wrap', verify_error));\n            }\n            if (!valid) {\n              reply(raiseError('unauthorized', 'Invalid credentials',\n              tokenType), null, { credentials: decoded });\n            } else {\n              reply.continue({\n                credentials: credentials || decoded,\n                artifacts: token\n              });\n            }\n\n            return true;\n          });\n      }\n\n      return true;\n    },\n    /**\n     * response is an Optional method called if an options.responseFunc is set.\n     * @param {Object} request - the standard route handler request object\n     * @param {Object} reply - the standard hapi reply interface ...\n     * after we run the custom options.responseFunc we reply.continue to execute\n     * the next plugin in the list.\n     * @returns {Boolean} true. always return true (unless there's an error...)\n     */\n    response: function (request, reply) {\n      if (options.responseFunc && typeof options.responseFunc === 'function') {\n        options.responseFunc(request, reply, function (err) {\n          if (err) {\n            reply(raiseError('wrap', err));\n          } else {\n            reply.continue();\n          }\n        });\n      } else {\n        reply.continue();\n      }\n\n      return true;\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-hapi-auth-jwt2/node_modules/hapi-auth-jwt2/lib/extract.js":"'use strict';\n\nvar Cookie = require('cookie'); // highly popular decoupled cookie parser\n\n/**\n * customOrDefaultKey is a re-useable method to determing if the developer\n * using the plugin has defined a custom key for extractin the JWT\n * @param {Object} options - the options passed in when registering the plugin\n * @param {String} key - name of the key e.g `urlKey` see: https://git.io/vXbJN\n * @param {String} _default - the default key used if no custom is defined.\n * @returns {String} key - the custom key or default key.\n */\nfunction customOrDefaultKey (options, key, _default) {\n  return options[key] === false\n  || typeof options[key] === 'string' ? options[key] : _default;\n}\n\n /**\n  * Extract the JWT from URL, Auth Header or Cookie\n  * @param {Object} request - standard hapi request object inclduing headers\n  * @param {Object} options - the configuration options defined by the person\n  * using the plugin. this includes relevant keys. (see docs in Readme)\n  * @returns {String} token - the raw JSON Webtoken or `null` if invalid\n  */\nmodule.exports = function extract (request, options) {\n  // The key holding token value in url or cookie defaults to token\n  var auth, token;\n  var cookieKey = customOrDefaultKey(options, 'cookieKey', 'token');\n  var headerKey = customOrDefaultKey(options, 'headerKey', 'authorization');\n  var urlKey = customOrDefaultKey(options, 'urlKey', 'token');\n  var pattern = new RegExp(options.tokenType + '\\\\s+([^$]+)', 'i');\n\n  if (urlKey && request.query[urlKey]) { // tokens via url: https://github.com/dwyl/hapi-auth-jwt2/issues/19\n    auth = request.query[urlKey];\n  } else if (headerKey && request.headers[headerKey]) {\n    if (typeof options.tokenType === 'string') {\n      token = request.headers[headerKey].match(pattern);\n      auth = token === null ? null : token[1];\n    } else {\n      auth = request.headers[headerKey];\n    } // JWT tokens in cookie: https://github.com/dwyl/hapi-auth-jwt2/issues/55\n  } else if (cookieKey && request.headers.cookie) {\n    auth = Cookie.parse(request.headers.cookie)[cookieKey];\n  }\n\n  // strip pointless \"Bearer \" label & any whitespace > http://git.io/xP4F\n  return auth ? auth.replace(/Bearer/gi, '').replace(/ /g, '') : null;\n};\n\n/**\n * isValid is a basic check for JWT validity of Token format http://git.io/xPBn\n * @param {String} token - the token extracted from Header/Cookie/query\n * @returns {Boolean} true|false - true if JWT is valid. false if invalid.\n */\nmodule.exports.isValid = function isValid (token) {\n  return token.split('.').length === 3;\n};\n"}